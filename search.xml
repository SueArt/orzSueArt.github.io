<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[[LuoGu]P5116 [USACO18DEC]Mixing Milk]]></title>
    <url>%2F2019%2F02%2F01%2FLuoGu-P5116-USACO18DEC-Mixing-Milk%2F</url>
    <content type="text"><![CDATA[[LuoGu]P5116 [USACO18DEC]Mixing Milk 看到题解中没有dfs的，这里写一篇dfs的题解其实没必要这么麻烦，就算是一次dfs练习吧 Code1234567891011121314151617#include&lt;bits/stdc++.h&gt;#define ll long longusing namespace std;int A,B,C,a,b,c;inline void dfs(int a,int b,int c,int time)&#123; if(!time)&#123;printf("%d\n%d\n%d\n",a,b,c);return ;&#125; if(time%3==1)dfs(max(0,a-min(a,B-b)),min(b+a,B),c,time-1); //a倒给b else if(time%3==0)dfs(a,max(0,b-min(b,C-c)),min(c+b,C),time-1); //b倒给c else if(time%3==2)dfs(min(a+c,A),b,max(0,c-min(c,A-a)),time-1); //c倒给a&#125;int main()&#123; scanf("%d%d%d%d%d%d",&amp;A,&amp;a,&amp;B,&amp;b,&amp;C,&amp;c); dfs(a,b,c,100); return 0;&#125; 上述代码还可以优化，这里就懒得写了qwq]]></content>
      <categories>
        <category>题解</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[[LuoGu]P5018 对称二叉树]]></title>
    <url>%2F2019%2F02%2F01%2FLuoGu-P5018-%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91%2F</url>
    <content type="text"><![CDATA[[LuoGu]P5018 对称二叉树 Solution本题作为PJ T4其实还是历届以来较简单的 题目相信大家已经读过了，就是让我们找出一棵二叉树中具有最多结点的对称子树。 但肯定会有很多人审题不清楚而导致没有弄清对称子树的概念（可能是时间也不够扒） 下面就来给大家讲（胡）解（扯）一下 在上图中，我们可以看出，子树既可以是根节点和叶节点组成，也可以是一个节点， 如图中绿色笔圈出的就是一棵树。在比赛中，有很多选手将对称子树理解成：一棵树 中的一部分为对称（如图中蓝色笔和粉色笔圈出的）。但实际上这棵树的正解确是由 红笔圈出的子树！！可见题意中的对称二叉子树是必须由一个根节点一直到树的最底 部所组成的树。 main idea 1.枚举根节点，判断其左右两个孩子节点 1–&gt;是否存在 2–&gt;是否相等 若相等，则一直递归左右两个孩子节点的左右两个孩子节点重复上述判 断。 2.判断好对称二叉树后，就可以愉快地计算以该节点为根节点的对称二 叉子树的节点数量并取最优值了。 Code12345678910111213141516171819202122232425262728293031323334353637383940414243#include&lt;bits/stdc++.h&gt;#define ll long longconst int maxn=2000000;using namespace std;ll a[maxn],l[maxn],r[maxn],ans,n,i; //a数组存节点数值，l[i]表示编号为i的节点的左孩子的编号，l[i]表示编号为i的节点的右孩子的编号，bool f; //全局变量f判断是否为对称二叉子树inline ll cnt(ll x) //计算以x为根节点的对称二叉子树的节点数 *递归&#123; ll sum=0; if(l[x]!=-1)sum+=cnt(l[x]); if(r[x]!=-1)sum+=cnt(r[x]); return sum+1; //别忘了根节点！！&#125;void work(ll xx,ll yy) //判断对称二叉子树的函数 *递归&#123; if(xx==-1&amp;&amp;yy==-1)return ; //如果已经到底了，结束 if(xx==-1||yy==-1||a[xx]!=a[yy])&#123; f=0;return ;&#125; //不对称 work(l[xx],r[yy]); work(r[xx],l[yy]); //这里代码后插图另作解释QWQ&#125;int main()&#123; cin&gt;&gt;n; //读入n for(i=1;i&lt;=n;++i)scanf("%lld",&amp;a[i]); //读入每个节点的值 for(i=1;i&lt;=n;++i) scanf("%lld%lld",&amp;l[i],&amp;r[i]); //读入每个节点的左右孩子节点编号 ans=1; //至少有一个对称（一个节点） for(i=1;i&lt;=n;++i) //枚举对称二叉子树的根节点 &#123; if(l[i]!=-1&amp;&amp;r[i]!=-1&amp;&amp;a[l[i]]==a[r[i]]) //这里可以过滤很多不必要的枚举 &#123; f=1; //先默认为是对称二叉子树 work(l[i],r[i]); //开始递归判断 if(f==1)ans=max(ans,cnt(i)); //如果是对称二叉子树就可以计算节点取最大值了 &#125; &#125; cout&lt;&lt;ans&lt;&lt;endl; //完美输出 return 0; //华丽丽结束 （撒花~~~）&#125; 上面代码中的可能有些犇犇不理解，这里再解释一下12work(l[xx],r[yy]); work(r[xx],l[yy]); 从图中可以看出，判断对称二叉子树时，应该是镜面对称的—-&gt;最左和最右的 如图红色的对红色，紫色的对紫色，所以就得到了上述代码 希望您看懂后能自己打出完美的代码！]]></content>
      <categories>
        <category>题解</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[[LuoGu]CF387A [George and Sleep]]]></title>
    <url>%2F2019%2F02%2F01%2FLuoGu-CF387A-George-and-Sleep%2F</url>
    <content type="text"><![CDATA[[LuoGu]CF387A [George and Sleep] 一道简单的模拟题,结果被#5卡了15分钟 Solution1.按字符串读入s和t，再将’:’两边分别处理进行计算 2.判断输出即可 Code1234567891011121314151617181920212223242526272829303132#include&lt;bits/stdc++.h&gt;#define ll long longusing namespace std;char s[5],t[5];int ls,lt,rs,rt,asl,asr;void doit()&#123; cin&gt;&gt;s&gt;&gt;t; ls=(s[0]-'0')*10+(s[1]-'0'); *分别处理读入字符串 rs=(s[3]-'0')*10+(s[4]-'0'); lt=(t[0]-'0')*10+(t[1]-'0'); rt=(t[3]-'0')*10+(t[4]-'0'); asr=rs-rt; if(asr&lt;0)asr+=60,asl--; *类似高精的借位 asl+=ls-lt; | if(asl&lt;0)asl+=24; &lt;---V 同上&#125;void print()&#123; if(asl&lt;10)cout&lt;&lt;"0"&lt;&lt;asl; *特判打印前导0 else cout&lt;&lt;asl; | cout&lt;&lt;":"; | if(asr&lt;10)cout&lt;&lt;"0"&lt;&lt;asr; &lt;---V同上 else cout&lt;&lt;asr; &#125;int main()&#123; doit(); print(); return 0;&#125; 谢谢支持~]]></content>
      <categories>
        <category>题解</category>
      </categories>
  </entry>
</search>
